#!/usr/bin/env python3

import os
import sys
import argparse
from pprint import pprint

class ReGit:
    def __init__(self):
        self.parser = self.initParser()

    def help(self):
        self.parser.print_help()

    def up(self):
        print('up')

    def find_root(self):
        print('find_root')

    def run(self):
        args, unknown = self.parser.parse_known_args()
        if args.command in dir(ReGit):
            self.args = args
            getattr(self, args.command)()
        else:
            args = sys.argv
            args[0] = 'git'
            os.execvp('git', args)

    def initParser(self):
        parser = argparse.ArgumentParser(description="Repeated Git version 0.0.1")
        parser.add_argument('-f', '--force',   action='store_const', dest='force',   const=True,   default=False,      help='force')
        parser.add_argument('-v', '--verbose', action='store_const', dest='verbose', const='',     default=' --quiet', help='be verbose')
        parser.add_argument('-V', '--version', action='version', version='%(prog)s 0.0.1')
        parser.add_argument('command', nargs='?', action='store', type=str, default='help', help='command name')
        return parser

class Aux:
    def system(self, command):
        self.notice('> ' + command.rstrip())
        result = os.system(command)
        if result:
            self.warning('! failed: {}'.format(result))
        return result

    def read_config_file(self, path):
        with open(path) as file:
            lines = file.readlines()
        self.repos = {}
        section = ''
        result = {}
        for line in lines:
            line = line.strip()
            check = re.search('^\[(.+)\]$', line)
            if check:
                section = check.group(1)
                if not section in result:
                    result[section] = {}
                continue
            check = re.search('^\s*(\S+)\s*=\s*(.+)\s*$', line)
            if check:
                result[section][check.group(1)] = check.group(2)
                continue
            result[section][line] = line
        return result

    def die(self, text='die', color='error'):
        self.error(text)
        quit()

    def error(self, text, color='error'):
        print(self.colored(text, color))

    def warning(self, text, color='warning'):
        print(self.colored(text, color))

    def notice(self, text, color='notice'):
        print(self.colored(text, color))

    def which(self, binary):
        return backtick('which ' + binary)

    def backtick(self, command):
        return os.popen(command).read().strip()

    def colored(self, text, color):
        types = {
            'notice':   'white',
            'success':  'green',
            'warning':  'yellow',
            'error':    'red',
        }
        colors = {
            'normal':   '',
            'white':    '\033[97m',
            'cyan':     '\033[96m',
            'magenta':  '\033[95m',
            'blue':     '\033[94m',
            'yellow':   '\033[93m',
            'green':    '\033[92m',
            'red':      '\033[91m',
            'end':      '\033[0m',
        }
        if color in types:
            color = types[color]
        return colors[color] + text + colors['end']

if __name__ == '__main__':
    ReGit().run()
